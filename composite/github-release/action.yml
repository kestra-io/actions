name: "Create a GitHub Release"
description: "This action creates a GitHub release and uploads assets to it. Expect to be run on a tag following the format vX.Y.Z. Provide the environment variable `MAKE_LATEST` to `false` to avoid marking this github release as latest."

runs:
  using: composite
  steps:

    - name: Setup - Checkout Jreleaser file
      uses: actions/checkout@v4
      with:
        repository: kestra-io/actions
        ref: main
        path: jreleaser

    - name: Setup - Generate variables for JReleaser
      shell: bash
      run: |
        # Output tag in correct format
        echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

        main=$(git ls-remote --heads origin main)
        master=$(git ls-remote --heads origin master)
        if [ ! -z "$main" ]; then
          echo "BRANCH=main" >> $GITHUB_ENV
        elif [ ! -z "$master" ]; then
          echo "BRANCH=master" >> $GITHUB_ENV
        else
          echo "BRANCH=develop" >> $GITHUB_ENV
        fi

    - name: Setup - Copy jreleaser.yml
      shell: bash
      run: |
        cp jreleaser/jreleaser.yml .

    - name: Patch jreleaser.yml for major releases
      shell: bash
      run: |
        # Retrieve all existing versions (tags) and add the current version
        all_versions=$( (git tag -l 'v*' | sed 's/^v//' ; echo "${{ env.VERSION }}" ) | sort -V)

        # Get the highest version
        highest=$(echo "$all_versions" | tail -n1)

        echo "Current version: ${{ env.VERSION }}"
        echo "Highest version: $highest"

        if [ "${{ env.VERSION }}" = "$highest" ]; then
          echo "→ This is the highest version, setting makeLatest=TRUE"
          sed -i "s/makeLatest: 'FALSE'/makeLatest: 'TRUE'/g" jreleaser.yml
        else
          echo "→ Not the highest version, keep makeLatest=FALSE"
        fi
        
    - name: Setup - Set Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21

    - name: JReleaser - Release
      uses: jreleaser/release-action@v2
      env:
        JRELEASER_BRANCH: ${{ env.BRANCH}}
        JRELEASER_GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        JRELEASER_PROJECT_VERSION: ${{ env.VERSION }}
        JRELEASER_ANNOUNCE_SLACK_WEBHOOK: ${{ env.SLACK_RELEASES_WEBHOOK_URL }}

    - name: JReleaser - Output properties & logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jreleaser-release
        path: |
          out/jreleaser/trace.log
          out/jreleaser/output.properties