name: Main

on:
  workflow_call:
    inputs:
      skip-test:
        description: "Does we need to skip test"
        required: true
        type: boolean
      gradle-publish:
        description: "Does we use gradle publish or sonatype publish"
        required: true
        type: boolean

jobs:
  main:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
    steps:
      # Check out
      - name: Checkout repository
        uses: actions/checkout@v4

      # Checkout GitHub Actions
      - name: Checkout actions
        uses: actions/checkout@v4
        with:
          repository: kestra-io/actions
          sparse-checkout-cone-mode: true
          path: actions
          sparse-checkout: |
            .github/actions
          ref: main

      # Setup build
      - name: Setup build
        uses: ./actions/.github/actions/setup-build
        id: build
        with:
          java-enabled: true
          caches-enabled: true

      # Setup for unit test
      - name: Setup for unit test
        if: ${{ inputs.skip-test == false }}
        run: |
          if [ -f setup-unit.sh ]; then
            ./setup-unit.sh
          fi

      # Gradle check
      - name: Build with Gradle
        if: ${{ inputs.skip-test == false }}
        shell: bash
        run: ./gradlew check
      
      # Allure check
      - name: Auth to Google Cloud
        id: auth
        if: ${{ always() && env.GOOGLE_SERVICE_ACCOUNT != '' }}
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_SERVICE_ACCOUNT }}'

      - name: Generate slug variables
        uses: rlespinasse/github-slug-action@v4

      - name: Publish allure report
        uses: andrcuns/allure-publish-action@v2.6.0
        if: ${{ always() && env.GOOGLE_SERVICE_ACCOUNT != '' && inputs.skip-test == false }}
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JAVA_HOME: /usr/lib/jvm/default-jvm/
        with:
          storageType: gcs
          resultsGlob: build/allure-results
          bucket: internal-kestra-host
          baseUrl: "https://internal.kestra.io"
          prefix: ${{ format('{0}/{1}/{2}', github.repository, env.GITHUB_HEAD_REF_SLUG != '' && env.GITHUB_HEAD_REF_SLUG || github.ref_name, 'allure/java') }}
          copyLatest: true
          ignoreMissingResults: true
      
      # Jacoco
      - name: Set up Cloud SDK
        if: ${{ env.GOOGLE_SERVICE_ACCOUNT != '' && inputs.skip-test == false }}
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Copy jacoco files
        if: ${{ env.GOOGLE_SERVICE_ACCOUNT != '' && inputs.skip-test == false }}
        shell: bash
        run: |
          if [ -d build/reports/jacoco/testCodeCoverageReport ]; then
            mv build/reports/jacoco/testCodeCoverageReport build/reports/jacoco/test/
            mv build/reports/jacoco/test/testCodeCoverageReport.xml build/reports/jacoco/jacocoTestReport.xml
          fi

          if [ -d build/reports/jacoco/test/ ]; then
            gsutil -m rsync -d -r  build/reports/jacoco/test/ gs://internal-kestra-host/${{ format('{0}/{1}/{2}', github.repository, env.GITHUB_HEAD_REF_SLUG != '' && env.GITHUB_HEAD_REF_SLUG || github.ref_name, 'jacoco') }}
          fi

      # Simple Publish
      - name: Publish package with Gradle
        shell: bash
        if: ${{ inputs.gradle-publish == true && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        run: ./gradlew publish

      # Publish on Sonatype
      - name: Publish package to Sonatype Snapshot
        if: ${{ inputs.gradle-publish == false && github.ref == 'refs/heads/master' }}
        shell: bash
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USER }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_GPG_KEYID: ${{ secrets.SONATYPE_GPG_KEYID }}
          SONATYPE_GPG_PASSWORD: ${{ secrets.SONATYPE_GPG_PASSWORD }}
          SONATYPE_GPG_FILE: ${{ secrets.SONATYPE_GPG_FILE }}
        run: |
          echo "signing.keyId=${SONATYPE_GPG_KEYID}" > ~/.gradle/gradle.properties
          echo "signing.password=${SONATYPE_GPG_PASSWORD}" >> ~/.gradle/gradle.properties
          echo "signing.secretKeyRingFile=${HOME}/.gradle/secring.gpg" >> ~/.gradle/gradle.properties
          echo ${SONATYPE_GPG_FILE} | base64 -d > ~/.gradle/secring.gpg
          ./gradlew publishToSonatype
      
      # Release
      - name: Release package to Maven Central
        if: ${{ inputs.gradle-publish == false && startsWith(github.ref, 'refs/tags/v') }}
        shell: bash
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_USER }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_GPG_KEYID: ${{ secrets.SONATYPE_GPG_KEYID }}
          SONATYPE_GPG_PASSWORD: ${{ secrets.SONATYPE_GPG_PASSWORD }}
          SONATYPE_GPG_FILE: ${{ secrets.SONATYPE_GPG_FILE }}
        run: |
          echo "signing.keyId=${SONATYPE_GPG_KEYID}" > ~/.gradle/gradle.properties
          echo "signing.password=${SONATYPE_GPG_PASSWORD}" >> ~/.gradle/gradle.properties
          echo "signing.secretKeyRingFile=${HOME}/.gradle/secring.gpg" >> ~/.gradle/gradle.properties
          echo ${SONATYPE_GPG_FILE} | base64 -d > ~/.gradle/secring.gpg
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
      
      # GitHub Release
      - name: Create GitHub release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            build/libs/*.jar
      
      # Slack
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        if: ${{ always() && env.SLACK_WEBHOOK_URL != '' }}
        with:
          status: ${{ job.status }}
          job_name: Check & Publish
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          username: GitHub Actions
          icon_emoji: ':github-actions:'
          channel: 'C02DQ1A7JLR'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
