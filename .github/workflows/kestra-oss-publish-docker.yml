name: Create Docker images on Release

on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        description: "The Dockerhub username."
        required: true
      DOCKERHUB_PASSWORD:
        description: "The Dockerhub password."
        required: true
      SLACK_WEBHOOK_URL:
        required: true
    inputs:
      retag-latest:
        description: 'Retag latest Docker images'
        required: false
        type: boolean
        default: false
      retag-lts:
        description: 'Retag LTS Docker images'
        required: false
        type: boolean
        default: false
      plugin-version:
        description: 'Plugin version'
        required: false
        type: string
        default: "LATEST"

env:
  PLUGIN_VERSION: ${{ inputs.plugin-version != null && inputs.plugin-version || 'LATEST' }}
jobs:
  plugins:
    name: List Plugins
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.plugins.outputs.plugins }}
    steps:
      # Checkout
      - uses: actions/checkout@v5

      # Get Plugins List
      - name: Get Plugins List
        uses: kestra-io/actions/composite/kestra-oss/kestra-oss-plugins-list@main
        id: plugins
        with: # remap LATEST-SNAPSHOT to LATEST
          plugin-version: ${{ env.PLUGIN_VERSION == 'LATEST-SNAPSHOT' && 'LATEST' || env.PLUGIN_VERSION }}

  # ********************************************************************************************************************
  # Build
  # ********************************************************************************************************************
  build-artifacts:
    name: Build Artifacts
    uses: ./.github/workflows/kestra-oss-build-artifacts.yml

  docker:
    name: Publish Docker
    needs: [ plugins, build-artifacts ]
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - name: "-no-plugins"
            plugins: ""
            packages: jattach
            python-libs: ""
          - name: ""
            plugins: ${{needs.plugins.outputs.plugins}}
            packages: python3 python-is-python3 python3-pip curl jattach
            python-libs: kestra
    steps:
      - uses: actions/checkout@v5

      # Vars
      - name: Set image name
        id: vars
        run: |
          if [[ "${{ inputs.release-tag }}" == "" ]]; then
            TAG=${GITHUB_REF#refs/*/}
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
          else
            TAG="${{ inputs.release-tag }}"
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
          fi

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # this will remove the patch version number
              MINOR_SEMVER=${TAG%.*}
              echo "minor_semver=${MINOR_SEMVER}" >> $GITHUB_OUTPUT
            else
              echo "Tag '$TAG' is not a valid semver (vMAJOR.MINOR.PATCH), skipping minor_semver"
            fi
          fi

          if [[ "${{ env.PLUGIN_VERSION }}" == *"-SNAPSHOT" ]]; then
            echo "plugins=--repositories=https://central.sonatype.com/repository/maven-snapshots/ ${{ matrix.image.plugins }}" >> $GITHUB_OUTPUT;
          else
            echo "plugins=${{ matrix.image.plugins }}" >> $GITHUB_OUTPUT
          fi

      # Download executable from artifact
      - name: Artifacts - Download executable
        uses: actions/download-artifact@v5
        with:
          name: exe
          path: build/executable

      - name: Copy exe to image
        run: |
          cp build/executable/* docker/app/kestra && chmod +x docker/app/kestra

      # Docker setup
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker - Fix Qemu
        shell: bash
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes -c yes

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Login
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker Build and push
      - name: Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ format('kestra/kestra:{0}{1}', steps.vars.outputs.tag, matrix.image.name) }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            KESTRA_PLUGINS=${{ steps.vars.outputs.plugins }}
            APT_PACKAGES=${{ matrix.image.packages }}
            PYTHON_LIBRARIES=${{ matrix.image.python-libs }}

      - name: Install regctl
        if: startsWith(github.ref, 'refs/tags/v')
        uses: regclient/actions/regctl-installer@main

      - name: Retag to minor semver version
        if: startsWith(github.ref, 'refs/tags/v') && steps.vars.outputs.minor_semver != ''
        run: |
          regctl image copy ${{ format('kestra/kestra:{0}{1}', steps.vars.outputs.tag, matrix.image.name) }} ${{ format('kestra/kestra:{0}{1}', steps.vars.outputs.minor_semver, matrix.image.name) }}

      - name: Retag to latest
        if: startsWith(github.ref, 'refs/tags/v') && inputs.retag-latest == true
        run: |
          regctl image copy ${{ format('kestra/kestra:{0}{1}', steps.vars.outputs.tag, matrix.image.name) }} ${{ format('kestra/kestra:latest{0}', matrix.image.name) }}

      - name: Retag to LTS
        if: startsWith(github.ref, 'refs/tags/v') && inputs.retag-lts == true
        run: |
          regctl image copy ${{ format('kestra/kestra:{0}{1}', steps.vars.outputs.tag, matrix.image.name) }} ${{ format('kestra/kestra:latest-lts{0}', matrix.image.name) }}

  end:
    runs-on: ubuntu-latest
    needs:
      - docker
    if: always()
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Slack notification
        if: ${{ failure() && env.SLACK_WEBHOOK_URL != 0 }}
        uses: kestra-io/actions/composite/slack-status@main
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}

